DROP TABLE IF EXISTS benefitpoint.custom_field_value;
GO 

CREATE TABLE benefitpoint.custom_field_value (
	 cfv_source 			TEXT 	NOT NULL 
	,source_key 			int 	NOT NULL 
	,custom_field_value_id 	int 	NOT NULL 
	,custom_field_id 		int 	NOT NULL 
	,option_value_id 		int 	NULL 
	,value_text 			TEXT 	NULL 
	,CONSTRAINT custom_field_value_pkey PRIMARY KEY (cfv_source, source_key, custom_field_value_id)
);
GO 

/*** PERMISSIONS ***/
ALTER TABLE benefitpoint.custom_field_value OWNER TO mj_admin;
GO 

GRANT SELECT ON TABLE benefitpoint.custom_field_value TO rl_benefitpoint_r;
GO 

GRANT INSERT ON TABLE benefitpoint.custom_field_value TO rl_benefitpoint_a;
GO 

GRANT UPDATE ON TABLE benefitpoint.custom_field_value TO rl_benefitpoint_w;
GO 

/*** TRIGGERS ***/
CREATE TRIGGER audit_d AFTER DELETE ON benefitpoint.custom_field_value FOR EACH ROW EXECUTE FUNCTION benefitpoint.tr_audit_custom_field_value_d();
GO 

CREATE TRIGGER audit_i AFTER INSERT ON benefitpoint.custom_field_value FOR EACH ROW EXECUTE FUNCTION benefitpoint.tr_audit_custom_field_value_i();
GO 

CREATE TRIGGER audit_u AFTER UPDATE ON benefitpoint.custom_field_value FOR EACH ROW WHEN (OLD IS DISTINCT FROM NEW) EXECUTE FUNCTION benefitpoint.tr_audit_custom_field_value_u();
GO 

/**********************/
/*** AUDIT TABLE(S) ***/
/**********************/
DROP TABLE IF EXISTS benefitpoint.audit_custom_field_value;
GO 

CREATE TABLE benefitpoint.audit_custom_field_value (
	 cfv_source 				TEXT 		NOT NULL 
	,source_key 				int 		NOT NULL 
	,custom_field_value_id 		int 		NOT NULL 
	,old_custom_field_id 		int 		NULL 
	,new_custom_field_id 		int 		NULL
	,old_option_value_id 		int 		NULL 
	,new_option_value_id 		int 		NULL 
	,old_value_text 			TEXT 		NULL 
	,new_value_text 			TEXT 		NULL 
	,audit_action 				char(1) 	NOT NULL 
	,audit_user 				TEXT 		NOT NULL 	DEFAULT current_user
	,audit_timestamp 			timestamp 	NOT NULL 	DEFAULT timezone('utc'::TEXT, clock_timestamp())
	,audit_id 					bigint 		NOT NULL 	GENERATED BY DEFAULT AS IDENTITY 	PRIMARY KEY 
);
GO 

/*** PERMISSIONS ***/
ALTER TABLE benefitpoint.audit_custom_field_value OWNER TO mj_admin;
GO 

GRANT INSERT ON benefitpoint.audit_custom_field_value TO rl_benefitpoint_a;
GO 

/****************/
/*** TRIGGERS ***/
/****************/
CREATE OR REPLACE FUNCTION benefitpoint.tr_audit_custom_field_value_d()
RETURNS TRIGGER 
LANGUAGE plpgsql 
AS $$

BEGIN 
	INSERT INTO benefitpoint.audit_custom_field_value (
		 cfv_source
		,source_key 
		,custom_field_value_id 
		,old_custom_field_id 
		,old_option_value_id 
		,old_value_text 
		,audit_action 
	)
	SELECT 	 OLD.cfv_source 
			,OLD.source_key 
			,OLD.custom_field_value_id
			,OLD.custom_field_id 
			,OLD.option_value_id 
			,OLD.value_text 
			,'D';
	RETURN OLD;
END;
$$;
GO 

CREATE OR REPLACE FUNCTION benefitpoint.tr_audit_custom_field_value_i()
RETURNS TRIGGER 
LANGUAGE plpgsql 
AS $$

BEGIN 
	INSERT INTO benefitpoint.audit_custom_field_value (
		 cfv_source 
		,source_key 
		,custom_field_value_id 
		,new_custom_field_id 
		,new_option_value_id 
		,new_value_text 
		,audit_action 
	)
	SELECT 	 NEW.cfv_source 
			,NEW.source_key
			,NEW.custom_field_value_id
			,NEW.custom_field_id 
			,NEW.option_value_id 
			,NEW.value_text 
			,'I';
	RETURN NEW;
END;
$$;
GO 

CREATE OR REPLACE FUNCTION benefitpoint.tr_audit_custom_field_value_u()
RETURNS TRIGGER 
LANGUAGE plpgsql 
AS $$

BEGIN 
	INSERT INTO benefitpoint.audit_custom_field_value (
		 cfv_source 
		,source_key 
		,custom_field_value_id 
		,old_custom_field_id 
		,new_custom_field_id 
		,old_option_value_id 
		,new_option_value_id 
		,old_value_text 
		,new_value_text
		,audit_action 
	)
	SELECT 	 OLD.cfv_source 
			,OLD.source_key
			,OLD.custom_field_value_id 
			,OLD.custom_field_id 
			,NEW.custom_field_id
			,OLD.option_value_id 
			,NEW.option_value_id 
			,OLD.value_text 
			,NEW.value_text 
			,'U';
	RETURN OLD;
END;
$$;
GO 

/*****************/
/*** FUNCTIONS ***/
/*****************/
CREATE OR REPLACE FUNCTION benefitpoint.sp_custom_field_value_upsert() 
RETURNS int 
LANGUAGE plpgsql 
AS $$

DECLARE rc int;

BEGIN 
	INSERT INTO benefitpoint.custom_field_value (
		 cfv_source
		,source_key
		,custom_field_value_id
		,custom_field_id
		,option_value_id
		,value_text
	)
	SELECT 	 cfv_source
			,source_key
			,custom_field_value_id
			,custom_field_id
			,option_value_id
			,value_text
	FROM 	benefitpoint.stg_custom_field_value 
	ON CONFLICT (cfv_source, source_key, custom_field_value_id) DO UPDATE 
	SET 	 custom_field_id 	= excluded.custom_field_id 
			,option_value_id 	= excluded.option_value_id 
			,value_text 		= excluded.value_text 
	WHERE 	(custom_field_value.custom_field_id,custom_field_value.option_value_id,custom_field_value.value_text) 
		IS DISTINCT FROM 	(excluded.custom_field_id,excluded.option_value_id,excluded.value_text);
	
	GET DIAGNOSTICS rc = row_count;

	RETURN rc;
END;
$$;
GO 

/*** PERMISSIONS ***/
ALTER FUNCTION benefitpoint.sp_custom_field_value_upsert() OWNER TO mj_admin;
GO 

GRANT EXECUTE ON FUNCTION benefitpoint.sp_custom_field_value_upsert() TO rl_benefitpoint_x;
GO 
